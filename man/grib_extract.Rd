% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grib_extract.R
\name{grib_extract}
\alias{grib_extract}
\title{Extract the specified area of interest (sub-grid) and variables (layers) from GRIB archive}
\usage{
grib_extract(
  grib_df,
  file_idx = NULL,
  regex = .rr_regex,
  aoi = NULL,
  memory_limit = 8L
)
}
\arguments{
\item{grib_df}{data frame, a subset of the rows returned by \code{grib_list}}

\item{file_idx}{integer vector, the rows of \code{grib_df} to load}

\item{regex}{character vector passed to \code{grib_idx} (layer names)}

\item{aoi}{geometry object coercible to \code{SpatVector}, the area of interest}

\item{memory_limit}{integer (in GB) the maximum memory usage allowed of the output}
}
\value{
a list of multi-layer SpatRasters (one per variable in \code{regex})
}
\description{
This opens (the subset \code{file_idx} of) GRIB files listed in \code{grib_df}, loading the
sub-grid and layers specified by \code{aoi} and \code{regex} (respectively). Results are returned
as a list of SpatRasters, one for each variable in \code{regex}, each with a layer for every
file (ie time).
}
\details{
With a large number of GRIBs, memory usage can get high and everything slows down
overall. I recommend loading at most 100s to 1000s of files at once, and merging results
as you go. \code{memory_limit} sets up a limit (in GB) as a sanity check.

The function calls \code{grib_idx} on \code{grib_df} (and not the subset in \code{file_idx})
to initially get basic grid information like dimensions, so make sure all the GRIBs
in \code{grib_df} use the same grid.
}
